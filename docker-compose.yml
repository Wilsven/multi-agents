services:
  # API Service (FastAPI)
  api:
    container_name: api_service
    platform: linux/amd64
    build:
      context: ./src/api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./src/api:/app
      - ./src/api/data:/app/data
    env_file:
      - .env
      - .azure/agents-development/.env
    environment:
      ENV_TYPE: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # # AGENT Service (FastAPI)
  agent:
    container_name: agent_service
    platform: linux/amd64
    build:
      context: ./src/agent
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./src/agent:/app
    env_file:
      - .env
      - .azure/agents-development/.env
    environment:
      # CRUCIAL: Tell the AGENT how to reach the API service.
      # 'api' is the service name defined above. Docker Compose handles DNS.
      # '8000' is the port the API service EXPOSES *inside* the Docker network.
      # API_URL: http://api:8000
      # Add other necessary agent env vars
      ENV_TYPE: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # # FRONTEND Service (React)
  frontend:
    container_name: frontend_service
    platform: linux/amd64
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    env_file:
      - .env
      - .azure/agents-development/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # frontend:
  #   container_name: frontend_service
  #   build:
  #     context: ./src/frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     # Map host port 4200 to container port 4200 (Angular default)
  #     - "4200:4200"
  #   volumes:
  #     # Mount local FRONTEND code. Exclude node_modules to use the ones installed in the container.
  #     - ./src/frontend:/app
  #     # Use a named volume or anonymous volume for node_modules to avoid overwriting container's node_modules
  #     - /app/node_modules
  #   environment:
  #     # Env vars needed by Angular during build/runtime (if any)
  #     # NOTE: The Angular app runs in the USER'S BROWSER.
  #     # It will typically access the AGENT via localhost or the host machine's IP,
  #     # using the PORT MAPPED ON THE HOST (8001 in this case).
  #     # So, configure your Angular environment.ts (for development) like:
  #     # agentUrl: 'http://localhost:8001'
  #     ENV_TYPE: development
  #   depends_on:
  #     # Optional, but good practice if frontend might make initial calls on load
  #     agent:
  #       # Wait for API healthcheck
  #       condition: service_healthy
  #     api:
  #       # Wait for API healthcheck
  #       condition: service_healthy

  # # --- Optional: Database Service (Example: PostgreSQL) ---
  # db:
  #   container_name: local_postgres_db
  #   image: postgres:15
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 10s
  #   restart: unless-stopped
# # --- Optional: Define volumes if needed (e.g., for databases for persistence, node_modules cache) ---
# volumes:
#   postgres_data:
#   node_modules_frontend:
