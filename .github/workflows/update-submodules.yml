# .github/workflows/update-submodules.yml (in main repo)
name: Update Submodules (Scheduled)

on:
  schedule:
    # At 12:00 AM, only on Friday (adjust cron syntax and timing as needed)
    - cron: "0 0 * * 5"
  workflow_dispatch: # Allows manual triggering

permissions:
  # Required to checkout the repo and push changes back
  contents: write

jobs:
  update:
    name: Update Submodules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # We need to fetch the submodules too, but not necessarily update them yet
          submodules: "true"
          # Fetch depth 0 is needed for accurate comparison later, though potentially slower
          fetch-depth: 0
          # Use a PAT or App token if your default GITHUB_TOKEN doesn't have push rights
          # Or if you need to trigger other workflows on the push this action makes.
          # token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions-bot@users.noreply.github.com"

      - name: Update Submodule References to Latest
        run: |
          echo "Updating submodules to track the latest commit on their default branch..."
          # This command checks the remote 'origin' for the branch configured for each submodule
          # (usually 'main' or 'master') and updates the main repo's index if the remote has moved.
          git submodule update --remote --init --recursive

      - name: Check for Changes, Stage ONLY Updated Submodules, Commit, and Push
        id: commit_push
        run: |
          # Get list of changed files/paths in the working tree compared to the index.
          # Updated submodules will appear here by their path.
          # Use '|| true' to prevent the command failing the step if there are no changes (git diff exits 1)
          CHANGED_PATHS=$(git diff --name-only || true)

          if [ -z "$CHANGED_PATHS" ]; then
            # No changes detected by git diff
            echo "No working tree changes detected initially (working tree is clean compared to index)."
            echo "committed=false" >> $GITHUB_OUTPUT
          fi

          # Changes were detected
          echo "Working tree changes detected:"
          echo "$CHANGED_PATHS" # Print the list of changed paths

          # Ensure we ONLY stage the detected submodule paths.
          # Filter CHANGED_PATHS to only include expected submodule paths.
          # This prevents staging accidental non-submodule files if any existed.
          STAGED_SOMETHING=false
          echo "$CHANGED_PATHS" | while IFS= read -r path; do
              # Basic check: Does the path exist in .gitmodules? A more robust check might be needed
              # if you have deeply nested submodules or complex paths.
              # This grep is simple: it checks if the path appears literally in the .gitmodules file.
              if grep -q "path = ${path}$" .gitmodules; then
                  STAGED_SOMETHING=true
                  echo "Staging updated submodule: $path"
                  git add "$path"
              else
                  echo "Skipping non-submodule or unexpected path: $path"
              fi
          done

          # Check if anything was ACTUALLY staged
          # `git diff --cached --quiet` compares HEAD to the index (staging area).
          # It exits 0 if NO differences (nothing staged), 1 if differences (something staged).
          if git diff --cached --quiet; then
              # If the exit code is 0, nothing is staged.
              echo "No relevant submodule changes were staged."
              echo "committed=false" >> $GITHUB_OUTPUT
          else
              # If the exit code is non-zero, something IS staged.
              echo "Staged changes detected. Committing..."
              git status --short # Show what's staged

              COMMIT_MSG="chore(submodules): Update submodule references ($(date +'%Y-%m-%d'))"
              echo "$COMMIT_MSG"
              git commit -m "$COMMIT_MSG"

              echo "Pushing changes..."
              git push origin HEAD:${{ github.ref_name }} # Push to the same branch the workflow ran on
              echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: No Changes to Commit
        if: steps.commit_push.outputs.changed == 'false'
        run: echo "Submodules are already up-to-date with their remote branches."

      - name: Final Status
        run: |
          if [ "${{ steps.commit_push.outputs.committed }}" = "true" ]; then
            echo "Workflow finished. Submodule changes were committed and pushed."
          else
            echo "Workflow finished. No relevant submodule changes were committed."
          fi
