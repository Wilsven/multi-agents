name: Integrate Submodule Release Tag

on:
  repository_dispatch:
    types: [submodule-released] # Match event-type from submodule workflow
  workflow_dispatch: # Keep manual trigger as backup/alternative
    inputs:
      submodule_path:
        description: "Path to the submodule (e.g., src/api)"
        required: true
      tag:
        description: "Tag to check out in the submodule (e.g., v1.2.0)"
        required: true

permissions:
  contents: write # To commit/push back to the main repo

jobs:
  integrate:
    name: Integrate Submodule
    runs-on: ubuntu-latest
    steps:
      - name: Extract Payload Data (Repository Dispatch)
        if: github.event_name == 'repository_dispatch'
        id: dispatch_payload
        run: |
          echo "submodule_path=${{ github.event.client_payload.submodule_path }}" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT

      - name: Extract Payload Data (Workflow Dispatch)
        if: github.event_name == 'workflow_dispatch'
        id: manual_payload
        run: |
          echo "submodule_path=${{ github.event.inputs.submodule_path }}" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Set Variables
        id: vars
        run: |
          # Combine outputs from previous steps
          if [ -n "${{ steps.dispatch_payload.outputs.submodule_path }}" ]; then
              echo "submodule_path=${{ steps.dispatch_payload.outputs.submodule_path }}" >> $GITHUB_OUTPUT
              echo "tag=${{ steps.dispatch_payload.outputs.tag }}" >> $GITHUB_OUTPUT
          else
              echo "submodule_path=${{ steps.manual_payload.outputs.submodule_path }}" >> $GITHUB_OUTPUT
              echo "tag=${{ steps.manual_payload.outputs.tag }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # Use PAT if default token insufficient or triggering other workflows
          # token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          # Fetch submodules definitions, but don't checkout content yet
          submodules: "false" # We'll handle checkout manually

      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions-bot@users.noreply.github.com"

      - name: Initialize and Update Specific Submodule to Tag
        run: |
          SUBMODULE_PATH="${{ steps.vars.outputs.submodule_path }}"
          TAG="${{ steps.vars.outputs.tag }}"

          echo "Initializing submodules..."
          git submodule update --init --recursive # Ensure all are initialized if needed

          echo "Updating submodule '$SUBMODULE_PATH' to tag '$TAG'..."
          cd "$SUBMODULE_PATH"
          git fetch origin --tags # Ensure tag is available locally
          # Checkout the specific tag DETACHED HEAD is OK here
          git checkout "refs/tags/$TAG"
          cd ../.. # Back to main repo root

          echo "Staging updated submodule reference..."
          git add "$SUBMODULE_PATH"

      - name: Check for Changes, Commit, and Push
        id: commit_push
        run: |
          SUBMODULE_PATH="${{ steps.vars.outputs.submodule_path }}"
          TAG="${{ steps.vars.outputs.tag }}"
          # Check if the specific submodule path was staged
          if git diff --cached --quiet -- "$SUBMODULE_PATH"; then
              # If exit code is 0 for this specific path (no differences found), run this block.
              echo "Submodule '$SUBMODULE_PATH' at tag '$TAG' resulted in no change or was already updated."
              echo "committed=false" >> $GITHUB_OUTPUT
          else
              # If exit code is NON-ZERO for this specific path (differences found), run this block.
              echo "Submodule '$SUBMODULE_PATH' reference updated to tag '$TAG'. Committing..."
              git status --short # Show what's staged again before commit

              COMMIT_MSG="chore(submodules): update $SUBMODULE_PATH submodule to tag $TAG ($(date +'%Y-%m-%d'))"
              echo "$COMMIT_MSG"
              git commit -m "$COMMIT_MSG"

              echo "Pushing changes..."
              git push origin HEAD:${{ github.ref_name }} # Push to the branch workflow ran on (usually main)
              echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Final Status
        run: |
          if [ "${{ steps.commit_push.outputs.committed }}" = "true" ]; then
            echo "Workflow finished. Submodule changes were committed and pushed."
          else
            echo "Workflow finished. No relevant submodule changes were committed."
          fi
